# -*- python -*-
# ex: set filetype=python:

import buildbot.plugins

# This must be installed as 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to.
# We also use an alias for readability.

build_config = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

build_config['workers'] = [
    buildbot.plugins.worker.Worker("worker", "worker")
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their --master option)

build_config['protocols'] = {
    'pb': {'port': 9989}
}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out about source code changes.

repository_keys = [environ for environ in os.environ if environ.startswith('GIT_REPOSITORY')]

build_config['change_source'] = []
for repository_key_current in repository_keys:
    repository = os.environ[repository_key_current]
    branch = os.environ.get(repository_key_current + '_BRANCH', 'master')

    build_config['change_source'].append(
        buildbot.plugins.changes.GitPoller(
            repository,
            workdir='gitpoller-workdir-{}'.format(repository_key_current),
            branches=[branch],
            pollinterval=300
        )
    )

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

build_config['schedulers'] = []
build_config['schedulers'].append(
    buildbot.plugins.schedulers.SingleBranchScheduler(
        name='all',
        change_filter=buildbot.plugins.util.ChangeFilter(),
        treeStableTimer=None,
        builderNames=['restart-services']
    )
)

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = buildbot.plugins.util.BuildFactory()
for service_current in services:
    factory.addStep(
        buildbot.plugins.steps.ShellCommand(
            command=['docker-compose', '-f', '/docker-compose/docker-compose.yml', 'build', service_current]
        )
    )
for service_current in services:
    factory.addStep(
        buildbot.plugins.steps.ShellCommand(
            command=['docker-compose', '-f', '/docker-compose/docker-compose.yml', 'up', '--no-deps', '--force-recreate', '-d', service_current]
        )
    )

build_config['builders'] = [
    buildbot.plugins.util.BuilderConfig(
        name='restart-services',
        workers=['worker'],
        factory=factory
    )
]

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

build_config['services'] = []

####### PROJECT IDENTITY

# # the 'title' string will appear at the top of this buildbot installation's
# # home pages (linked to the 'titleURL').
#
# build_config['title'] = ''  # ""Hello World CI"
# build_config['titleURL'] = ''  # ""https://buildbot.github.io/hello-world/"
#
# # the 'buildbotURL' string should point to the location where the buildbot's
# # internal web server is visible. This typically uses the port number set in
# # the 'www' entry below, but with an externally-visible host name which the
# # buildbot cannot figure out without some help.
#
# build_config['buildbotURL'] = ''  # ""http://localhost:8010/"
#
# # minimalistic config to activate new web UI
# build_config['www'] = dict(
#     port=8010,
#     plugins=dict(
#         waterfall_view={},
#         console_view={},
#         grid_view={}
#     )
# )

####### DB URL

build_config['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
